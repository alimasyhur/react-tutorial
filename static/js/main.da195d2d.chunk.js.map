{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","className","onClick","removeCharacter","Table","_this$props","this","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","type","onChange","App","characters","filter","character","i","toConsumableArray","concat","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAEMA,SAAc,WAClB,OACEC,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,wBAMNC,EAAY,SAAAC,GAChB,IAAMC,EAAOD,EAAME,cAAcC,IAAI,SAACC,EAAKC,GACzC,OACET,EAAAC,EAAAC,cAAA,MAAIQ,IAAKD,GACPT,EAAAC,EAAAC,cAAA,UAAKM,EAAIG,MACTX,EAAAC,EAAAC,cAAA,UAAKM,EAAII,KACTZ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQW,UAAU,yBAAyBC,QAAS,kBAAMV,EAAMW,gBAAgBN,KAAhF,cAKV,OAAOT,EAAAC,EAAAC,cAAA,aAAQG,IAmBFW,mLAfF,IAAAC,EACoCC,KAAKd,MAAvCE,EADFW,EACEX,cAAeS,EADjBE,EACiBF,gBAEtB,OACEf,EAAAC,EAAAC,cAAA,SAAOW,UAAU,aACfb,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAACkB,EAAD,CACEd,cAAeA,EACfS,gBAAiBA,YATXM,oBC4BLC,cArDb,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,KAAMd,KAURyB,aAAe,SAAAC,GAAS,IAAAC,EACAD,EAAME,OAArBrB,EADeoB,EACfpB,KAAMsB,EADSF,EACTE,MACbV,EAAKW,SAALV,OAAAW,EAAA,EAAAX,CAAA,GACGb,EAAQsB,KAdMV,EAkBnBa,WAAa,WACXb,EAAKnB,MAAMiC,aAAad,EAAKe,OAC7Bf,EAAKW,SAASX,EAAKgB,eAjBnBhB,EAAKgB,aAAe,CAClB5B,KAAM,GACNC,IAAK,IAGPW,EAAKe,MAAQf,EAAKgB,aARDhB,wEAuBV,IAAAiB,EACatB,KAAKoB,MAAlB3B,EADA6B,EACA7B,KAAMC,EADN4B,EACM5B,IAEb,OACEZ,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SACQuC,KAAK,OACL9B,KAAK,OACLsB,MAAOtB,EACPE,UAAU,mBACV6B,SAAUxB,KAAKW,eACvB7B,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SACQuC,KAAK,OACL9B,KAAK,MACLsB,MAAOrB,EACPC,UAAU,mBACV6B,SAAUxB,KAAKW,eACvB7B,EAAAC,EAAAC,cAAA,SACQuC,KAAK,SACLR,MAAM,SACNpB,UAAU,0BACVC,QAASI,KAAKkB,qBAhDXf,aCwCJsB,6MApCXL,MAAQ,CACNM,WAAY,MAGd7B,gBAAkB,SAAAN,GAAS,IACfmC,EAAerB,EAAKe,MAApBM,WAERrB,EAAKW,SAAS,CACVU,WAAYA,EAAWC,OAAO,SAACC,EAAWC,GACtC,OAAOA,IAAMtC,SAKzB4B,aAAe,SAAAS,GACbvB,EAAKW,SAAS,CAACU,WAAWpB,OAAAwB,EAAA,EAAAxB,CAAKD,EAAKe,MAAMM,YAAjBK,OAAA,CAA6BH,+EAG/C,IACAF,EAAc1B,KAAKoB,MAAnBM,WACP,OACE5C,EAAAC,EAAAC,cAAA,OAAKW,UAAU,uBACXb,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,2DACAF,EAAAC,EAAAC,cAACgD,EAAD,CACI5C,cAAesC,EACf7B,gBAAiBG,KAAKH,kBAE5Bf,EAAAC,EAAAC,cAACiD,EAAD,CAAMd,aAAcnB,KAAKmB,uBA7BjBhB,aCKE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.da195d2d.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nconst TableHeader = () => {\n  return (\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Job</th>\n            <th>Remove</th>\n        </tr>\n    </thead>\n  );\n}\n\nconst TableBody = props => {\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td><button className=\"App-btn App-btn-danger\" onClick={() => props.removeCharacter(index)}>Delete</button></td>\n      </tr>\n    )\n  });\n\n  return <tbody>{rows}</tbody>;\n}\n\nclass Table extends Component {\n    render() {\n        const {characterData, removeCharacter} = this.props;\n\n        return (\n          <table className=\"App-table\">\n            <TableHeader />\n            <TableBody\n              characterData={characterData}\n              removeCharacter={removeCharacter}\n            />\n          </table>\n        );\n    }\n}\n\nexport default Table;\n","import React, {Component} from 'react';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      name: '',\n      job: ''\n    };\n\n    this.state = this.initialState;\n  }\n\n  handleChange = event => {\n    const {name, value} = event.target;\n    this.setState({\n      [name] : value\n    })\n  }\n\n  submitForm = () => {\n    this.props.handleSubmit(this.state);\n    this.setState(this.initialState);\n  }\n\n  render() {\n    const {name, job} = this.state;\n\n    return (\n      <form>\n        <h3>Add New</h3>\n        <label>Name</label>\n        <input\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                className=\"App-form-control\"\n                onChange={this.handleChange} />\n        <label>Job</label>\n        <input\n                type=\"text\"\n                name=\"job\"\n                value={job}\n                className=\"App-form-control\"\n                onChange={this.handleChange} />\n        <input\n                type=\"button\"\n                value=\"Submit\"\n                className=\"App-btn App-btn-primary\"\n                onClick={this.submitForm} />\n      </form>\n    )\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends Component {\n    state = {\n      characters: []\n    };\n\n    removeCharacter = index => {\n        const { characters } = this.state;\n\n        this.setState({\n            characters: characters.filter((character, i) => {\n                return i !== index;\n            })\n        });\n    }\n\n    handleSubmit = character => {\n      this.setState({characters: [...this.state.characters, character]});\n    }\n\n    render() {\n      const {characters} = this.state;\n      return (\n        <div className=\"App-small-container\">\n            <h2>React Tutorial</h2>\n            <p>Add a character with name and job to the table</p>\n            <Table\n                characterData={characters}\n                removeCharacter={this.removeCharacter}\n            />\n          <Form handleSubmit={this.handleSubmit} />\n        </div>\n      );\n    }\n\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}